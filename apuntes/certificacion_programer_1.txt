============= CONCEPTOS =============

JAVA

    - Nació en 1991
    - James Gosling fue su creador
    - Sun Microsystems es la empresa donde se creo
    - 2010 Oracle adquiere Sun Microsystems
    - A partir de la versión 7 en adelante el poseedor es Oracle

CARACTERISTICAS

    1 Orientado a objetos               Significa que puedo modelar entidades de la vida real
    2 Distribuido                       Se puede tener en diferentes servidores, lo que hace que este en diferentes lugares, y la aplicación se vuelve ALTAMENTE ESCALABLE
    3 Simple                            No te preocupas por la administración de memoria, la java virtual matchine es quien se encarga de liberar la memoria
                                        Es un lenguaje tipado, reduce los valores en los tipos de datos que sean lo más sencillos posible
    4 Multi-hilo                        Multi-tarea, ejecuta varias tareas a la vez, (puede mostrar el formulario, al mismo tiempo imprimir un reporte)
                                        Agiliza la ejecución de aplicaciones
    5 Independiente de la plataforma    Multiplataforma es que corre en diferentes sistemas operativos gracias a la java virtual machine
                                        1.- Codificación (.java)
                                        2.- Complicación (.class)
                                        3.- Ejecución 
    6 Seguro                            LA PRINCIPAL razón es por el .class, el bytecode, no solo porque tenga .class ya lo ejecuta, hace
                                        diferentes validaciones antes, como que no haya desbordamiento de memoria, etc. HACE UN CHECK de validaciones

JRE

    - Traduce los archivos .class dependiendo del sistema operativo (ya sea para windows o para linux)


PALABRAS RESERVADAS

    - Son palabras propias del lenguaje de programación, que tienen un significado y un objetivo

MODIFICADOR DE ACCESO

    - Mide la visibilidad que tienen los elementos dentro de la aplicación java
    - Decide quien o que ve nuestra clase, método o atributo
    - Hay 4 tipos de modificadores de acceso: public, private, protected y package

    UML

        +   Público
        -   Privado
        #   Protegido
            Default (vacio)

    PUBLIC  - es visible para :  La misma clase (CLASE)      Para subclases (SUBCLASES)      Para otros paquetes (PAQUETE)       Desde cualquier lugar (UNIVERSO)
    PRIVATE - es visible para :  La misma clase (CLASE)   

BLOQUE DE CODIGO

    - Contiene varias sentencias que se van a ejecutar
    - Utiliza {} para saber donde inicia y donde termina

SENTENCIA

    - Es una instrucción denotada por ;

METODO MAIN

    - Es el bloque de código que contiene instrucciones que java desde un inicio va a ejecutar
    - Por donde va a iniciar a ejecutar el código
    - EN NETBEANS, cuando agregas un método MAIN a una clase, se le pone un iconito de "play", si lo alteras o lo escribes mal deja de agregarse este play  
    - NO HAY ERRORES DE COMPILACIÓN si lo escribes mal, simplemente deja de ser el método main                                                                                                      IMPORTANTEEEEEEEEEE
    - SE PUEDEN TENER 2 métodos main en una clase, solamente que el primero que se escriba de FORMA CORRECTA va a ser el "principal" (cambiando el parametro de entrada por ejemplo)                IMPORTANTEEEEEEEEEE
      Ejemplo: public static void main (String argumentotes[]) {} y public static void main (Object[] argumenazos) {}
    - Un método main se puede cambiar y ser CORRECTO de las siguientes maneras:

        1.  static public void main (String args[])                     Cambiando los modificadores (el primero es un modificador y el segundo un modificador de acceso)
        1.b static final public void main (String args[])               Igual pero agregando otro modificador (SOLO SE PUEDEN MOVER LOS MODIFICADORES Y NO PUEDE FALTAR STATIC)
        1.c final static public void main (String args[])

        2.  public static void main (String roberto[])                  El nombre de la variable puede cambiarse por el que sea 

        3.  public static void main (String... args)                    Agregando los 3 puntos, argumentos variables! 

        4.  public static void main (String[] args)                     Cambiando los [] enmedio o al final

JDK

    - Java Development Kit  -   Kit desarrollo o herramientas para desarrollar en java
    - DENTRO de la carpeta de instalación de java, vienen varios .exe ESAS son las herramientas, como jar.exe, javadoc.exe, java.exe, javac.exe
    - En este capitulo (el 2) vamos a utilizar java.exe y javac.exe
    - JAVA.exe  Sirve para ejecutar el código (osease la 3 fase de las 3 que tengo)
    - JAVAC.exe Sirve para compilar el código (osease la 2 fase de las 3 que tengo)

OBJETOS

    - En java los objetos tienen: ATRIBUTOS/CARACTERISTICAS y COMPORTAMIENTOS

CLASE

    - Es una plantilla o prototipo que nos permite crear un objeto
    - Los objetos se crean a partir de la definición de una clase
    - Una clase es como la receta con la que horneamos un pastel

    - Una clase a nivel código fuente solo puede tener dos modificadores de acceso PUBLIC o DEFAULT (Protected y Private dan un error en compilación)                                               IMPORTANTEEEEEEEEEE
    - Se puede DECLARAR más de una clase en un archivo java Y SOLO una de ellas puede ser publica, que es la que tiene el nombre del archivo
      (si pones otra y no concuerda con el nombre manda error de compilación)                                                                                                                       IMPORTANTEEEEEEEEEE
    - Se pueden declarar varias clases con el modificador de acceso defult y ninguna llamarse como el archivo (MANDA ERROR DE EJECUCIÓN no de compilación)                                          IMPORTANTEEEEEEEEEE
    - FORZOSAMENTE debe haber una declaración de una clase con modificador publico o default que se llame igual que el archivo, ESA será el punto de entrada para ejecutar el código                IMPORTANTEEEEEEEEEE
    - LA BUENA PRACTICA es solo tener una clase por archivo, si no es complicada de encontrar las otras clases en caso de que las tengan

ATRIBUTOS

    - A diferencia de las clases, los atributos pueden tener los 4 modificadores de acceso.

IDENTIFICADORES

    - Son los nombres que se les dan a las clases, métodos y/o atributos
    - 4 reglas:
        ~ Camel case                                            (REGLA: POR CONVENCIÓN / BUENA PRACTICA)
        ~ Deben iniciar y/o contener con letra, $ o _           (REGLA: SINTAXIS, si no, manda error de compilación)
        ~ Deben ser lo más descriptivos posibles                (REGLA: POR CONVENCIÓN / BUENA PRACTICA)
        ~ No se pueden nombrar utilizando una palabra reservada (REGLA: SINTAXIS, si no, manda error de compilación)

MÉTODOS

    - Los métodos pueden igual tener los 4 modificadores de acceso

VARIABLES

    - Son un espacio reservado en memoria que guarda/almacena un valor de diferente tipo
    
    VARIABLES DE ACUERDO A SU ALCANCE/LUGAR (donde se declaran):
        ~ Variables de INSTANCIA    Las que se definen dentro de una clase pero fuera de un método
                                    Le pertenecen a las instancias (objetos)
                                    Llevan un modificador de acceso
                                    Son inicializadas con valores por defecto
        ~ Variables LOCALES         Declaradas dentro de un método o vienen como parámetros de un método
                                    No llevan un modificador de acceso si se lo agregan DA UN ERROR DE COMPILACION                                                                                  IMPORTANTEEEEEEEEEE
                                    Deben estar inicializadas antes de ser utilizadas, porque si la usas si inicializar DA UN ERROR DE COMPILACION                                                  IMPORTANTEEEEEEEEEE

    VARIABLES DE ACUERDO AL TIPO DE DATO

        ~ Variables de REFERENCIA   El tipo de dato es una clase
        ~ Variables PRIMITIVAS      El tipo de dato es un dato primitivo

DATOS PRIMITIVOS

    - byte      8 bits      1 byte      -128 a 127 (el rango de números que recibe)
    - short     16 bits     2 bytes     5 posiciones
    - int       32 bits     4 bytes     10 posiciones
    - long      64 bits     8 bytes     9,223,372,036,854,775,807 (19 posiciones)
    - float     32 bits     4 bytes
    - double    64 bits     8 bytes
    - char      16 bits     2 bytes     65,535 (5 posiciones)
    - boolean   16 bits     2 bytes

LITERALES

    Los valores por defecto que se tienen al ser asignados a una variable

    - int           cuando es un número entero su tipo por defecto es int
    - long          cuando el número entero tiene un l o L
    - char          cuando estan entre comillas simples '', tambien pueden ser valores UNICODE (\u008c ó 94 (En número del unicode)) o DE ESCAPE (\t) 
    - String        cuando estan entre comillas dobles ""
    - boolean       cuando es true o false
    - float         cuando es un número decimal y tiene una f o F
    - double        cuando es un número decimal

    - octal         cuando tienen un 0 al prinicipio del número y números del 1 al 7                    01234567            OJO: Este número no es literal, se transforma a otro!
    - hexadecimal   cuando inician con 0x (mayúscula o minúscula) y luego letras o numeros              0XDEADCAFE          OJO: Este número no es literal, se transforma a otro!
    - binario       cuando inician con 0b (mayúscula o minúscula) y luego 0´s y 1´s                     0B01010101          OJO: Este número no es literal, se transforma a otro!


DECLARAR

    - Mencionar el tipo de dato y el valor/identificador

INICIALIZAR

    - Darle un valor a la variable

IMPORT

    - Se utiliza cuando quiero acceder a una clase que se encuentra en un paquete diferente
    - Cuando las clases se encuentran en el mismo package no necesitan hacer IMPORT                                                                                                                 IMPORTANTEEEEEEEEEE
    - No necesita el import de java.lang donde esta la clase String!!!!!                                                                                                                            IMPORTANTEEEEEEEEEE
    - LOS DOS PAQUETES SE IMPORTAN POR DEFAULT, no necesitan ser declarados
    - Si se hace el import paquete.* importa SOLO las clases que estan ahi, no importa los subdirectorios!!!!!!!                                                                                    IMPORTANTEEEEEEEEEE
    - Si el import viene despues de la clase o antes del package manda error de COMPILACION                                                                                                         IMPORTANTEEEEEEEEEE

PACKAGE

    - No puede haber más de una sentencia package                                                                                                                                                   IMPORTANTEEEEEEEEEE
    - Tiene que ir al principio o da un error de COMPILACION                                                                                                                                        IMPORTANTEEEEEEEEEE
PAQUETE

    - Es una carpeta que contiene clases java
    - El nombrado de los paquetes por convencion es en minúsculas
    - Por lo general llevan el domino de la empresa (org.mx o mx.com)


UML

    - Unified Modeling Languaje - Lenguaje Unificado de Modelado
    - Se basa en diagramas para especificar, visualizar y documentar modelos de sistemas de software orientado a objetos

TAXONOMIA

    - Ciencia para clasificar
    - Como por ejemplo (Oviparos en bilogía)

DIAGRAMA DE CLASES

    - Es el diagrama principal utilizado en las etapas de análisis y diseño
    - En el encontraremos la definición de los elementos de una clase como son atributos y métodos
    - Encontraremos tambien la relación entre las entidades definidas en la aplicación

IDE

    - Intagrated Development Enviroment  (Entorno de Desarrollo Integrado)
    - Una herramienta de software que permite a los programadores de software implemendar codigo, compilar y ejecutar

GIT

    - Sistema de Control de versiones

CONCATENACIÓN

    - Unir los valores de las variables

PROMOTION

    - Promoción, cuando asignas una variable de menor tamaño a una de mayor tamaño, como de byte a short o de short a int
    - SE BASA en la capacidad de los tipos de datos, tambien se puede asignar un long a un float sin mandar ningun error

CASTING

    - Lo contrario a promoción, aqui se tiene que hacer un cast cuando la variable es de un tipo menor a la otra, como de un short a un byte por ejemplo


STACK

    - Es una pila, primeras entradas primeras salidas, es donde van a vivir las variables las variables LOCALES, tanto referencia como primitivas

HEAP

    - Ahi viven las variables de INSTANCIA, tanto referencia como primitivas
    - Es una memoria DINAMICA, donde actua la maquina virtual para admistrar los objetos que van creando
    - Es donde actua el GARBAJE COLLECTOR

VALORES POR DEFECTO

    byte                            0
    short                           0
    int                             0
    long                            0L
    float                           0.0F
    double                          0.0
    char                            '\u0000' (caracter vacio)
    boolean                         false
    Toda variable de referencia     null

ARRAYS

    - En Java los arrays son OBJETOS, por lo que su referencia vive en heap
    - Los arrays se componen de ELEMENTOS indexados (es lo que guarda dentro de ellos)
    - Se asigna con x[posicion] = valor
    - Los corchetes de arreglo pueden ir antes "String[] identificador" o despues "String identificador[]" 
      (el primero es el buena practica porque si el nombre esta muy grande no se alcanza a ver)
    - Tambien se puede declarar con String[] identificador = {}
    - LENGTH en un array es una PROPIEDAD
    - LENGTH en un string es un METODO
    - Los arrays de objetos tienen REFERENCIAS a otros objetos

    - Si a un arreglo se le guarda un objeto con valores y despues EL OBJETO se iguala a NULO, el arreglo sigue apuntando a la referencia y es solo el objeto el que pierde la referencia

ARRAYS DE ARRAYS

    - Solo se necesita decir el valor del primer "nivel" por ejemplo: String[][] hola = [1][];
    - El primer [] contiene REFERENCIAS, el ultimo [] contiene VALORES, por ejemplo: [#][#][#][valores] o [#][valores]
    - El primer [] indica que va a contener MAS ARRAYS, por eso es referencia!!

    - puede haber:
        arreglos REGULARES [2][3] donde se define el tamaño que va a tener en todos los arreglos que se contienen
        arreglos IRREGULARES [2][] donde no se define el tamaño que va a tener una de sus referencias y puede variar por ejemplo:
            int hola[0] = new int[3];
            int hola[1] = new int[2];

    EXCEPCION

        - Es un error en tiempo de EJECUCIÓN

MAIN ARRAY

    - Se pueden pasar parametros al array que llega en main, hay dos formas:

        ~ NETBEANS: en properties (del proyecto) - en el apartado de RUN - en la opción de ARGUMENTS ahi ponemos los argumentos, para que sean varios se separan con "", por ejemplo:
            "hola"  "mundo"
            luego se selecciona la clase MAIN en el campo correspondiente y se le da click en "OK"
            y por ultimo click derecho al proyecto y en RUN (no funciona si lo haces desde el archivo click derecho run)
        ~ CONSOLA: se compila la clase PERO desde el paguete donde se esta haciendo: javac mx/com/hittechs/arrays/ArgsTest.java
                   luego se ejecuta pero cambiando por . asi: java mx.com.hittechs.arrays.ArgsTest "Hola Mundo" " Java"

PASOS EN LA CREACIÓN DE UN ARRAY

    1.- Reservar en memoria el espacio que ocupara el objeto (junto con el número de elementos)
    2.- Realizar la inicialización por defecto de los valores que tendrám esos ELEMENTOS (si son int 0, si son double 0.0, si son objetos null)
    3.- Enlazar la variable de referencia/objeto en STACK con el HEAP donde se reservo la memoria

OPERADORES ARITMETICOS

    - +, -, *, / y %
    - Se resuelven por precedencia (como en la imagen que esta en el escritorio), por ejemplo:
        System.out.println("Resultado aritmetico2: " + (2 + 5 * 6 / 7 % 6 + 7)); <-- 
        primero la multiplicación, luego la división, luego el residuo, luego la suma con 2 y al ultimo la suma con 7
    - Los parentesis influyen ya que pueden cambiar el orden (PERO NO LA PRESEDENCIA), por ejemplo:
        System.out.println("Resultado aritmetico2: " + (2 + 5 * (6 / 7) % 6 + 7)); 
    - Si hay una cadena al principio vuelve los elementos cadena igual, a menos que se usen los parentesis
        System.out.println("Resultado: " + i + j + 5); <-- todos cadenas
        System.out.println("Resultado: " + i + j / 5); <-- se hace la operación y luego todos se concatenan
         
OPERADORES DE ASIGNACIÓN

    - Simplifican la asignación operación de los valores
    - +=, -= , *=, /=

OPERADORES UNUARIOS

    - Necesitan un unico operando para hacer la operación, por ejemplo solo necesitan a, mientras que en los aritmeticos necesitan "a" y a "b"
    - Por ejemplo:
        ~ +a        Indica que es un valor positivo (no se necesita declarar, es raro)
        ~ -b        Indica que es un valor negativo
        ~ a++ o ++a Cuando esta al derecho, primero obtiene el valor actual y luego incrementa (hasta la siguiente sentencia)
                    Cuando esta del lado izquierdo, incrementa y luego obtiene el valor :)
        ~ ~a        Solo aplica en valores enteros, cambia todos los bits de 0 a 1 y los 1 a 0;


OPERADORES RELACIONALES                        
    
    - >, <, <=, >=, ==, !=

OPERADORES CONDICIONALES

    - &&, &, ||, |, !, ^
    - Por ejemplo:
        ~ con && solo evalua la primera operación y termina ahi. 
        ~ con & evalua el primero y el segundo, aun que el primero haya salido false!!! (aplica lo mismo con OR)
        ~ con ^ evalua si es true y true o false y false NO DEJA PASAR, pero si son diferentes true y false o false y true si los deja pasar
    - && es de CORTO CIRCUITO

OPERADORES BIT A BIT

    - &, | y ^
    - Suma la representación binaria de las variables dependiendo del operador & o | y ^
    - Se escriben int resultado = a | b  ó  int resultado = b ^ c
    - POR EJEMPLO: 12 y 13 con &, la representación binaria seria: 1100 1101 respectivamente, entonces:
        1100
        1101
        ----
        1100 <--------- esto da un 12
    - EL MISMO pero con |, entonces:
        1100
        1101
        ----
        1101 <--------- esto da un 13
    - El MISMO pero cn ^, entonces:
        1100
        1101
        ----
        0001 <--------- esto es un 1

OPERADORES TERNARIOS

    - ? :

IF / ELSE ESTRUCTURA

    - LA PRIMERA SENTENCIA CUANDO NO HAY LLAVES ES LA CONDICIONADA
    - Se puede inicializar una variable dentro del if!! por ejemplo if (a = false)  NO SE PUEDE DECLARAR!!!!!!!!

SWITCH ESTRUCTURA 

    - Se pueden usar: byte, shot, int, char, String y ENUM NADA MÁS
    - A partir de la versión 7 acepto String
    - El default puede ir sin break;
    - DEFAULT PUEDE IR AL PRINICIPIO!!!!!!!!!! Y NO AFECTA EN NADA
    - OJO, cuando encuentra donde quedarse, va a pintar todo hasta encontrar un break, si los otros case no tienen break se va a meter ahi (VER EJEMPLO SwitchTest)

FOR ciclo

    - Se divide en 4 secciones:
        ~ DECLARACIÓN: Coloca las variables donde el ciclo va a estar trabajando (ES OPCIONAL, puede estar o no)
        ~ CONDICION: Coloca la condición con la que se va a ejecutar (DEBE REGRESAR UN TRU O FALSE)
        ~ ACTUALIZACIÓN: Una expresión donde se va a ir actualizando la variable
        - BLOQUE: Donde se encuentra el bloque de codigo

    - La DECLARACIÓN es la unica que se ejecuta 1 sola vez
    - TODAS LAS SECCIONES SON OPCIONALES

    - Pasos de ejecución:
        ~ Declaración
        ~ Condición
        ~ Ejecución del bloque
        ~ Actualización y regresa a condición

    - Se puede poner: for (;;) y NO GENERA ERROR de compilación, SE HACE UN BUCKLE INFINITO
    - Se puede poner: for (int i = 0; ;) o 
    - Se puede poner: for (System.out.println("hola);i > 0;++i)
    - Se puede poner: for (String c = "hola"; (i >= a); c = "hola2")
    - Se pueden declarar varias variables: for (int a = 0, b = 10, c=200; ;)
    - Se pueden actualizar varias variables: for (;;i++, j--, x+=2)

    - NOTA*: Solo puede haber un ; por sección, por eso solo se pueden separar por comas

WHILE ciclo

    - Se compone de CONDICIÓN y BLOQUE

DO WHILE

    - Se compone de BLOQUE y CONDICIÓN 
    - Al menos entra 1 vez

BREAK y CONTINUE

    - Continue: se salta la iteración en la que esta, SI HAY ALGO POSTERIOR no lo hace
    - Break: Rompe todo el ciclo
    - SENTENCIA INALCANZABLE: Todo lo que esta posterior al continue o al break 
    - SENTENCIA INALCANZABLE: Lo posterior al return en un método
    - SENTENCIA INALCANZACLE: Cuando se tiene algo posterior a un ciclo infinito

THIS

    - Cuando existe ambiguedad entre una variable local y una de instancia
    - Cuano NO SE MENCIONA THIS, quien lleva preferencia es la variable local
      Por ejemplo en un setter cuando llega una variable, lo que hace es que le asigna el mismo valor a quien llega:
        public void setHola(int hola) {
            hola = hola; <--- NO LO ASIGNA A LA VARIABLE DE INSTANCIA, SI NO A LA MISMA QUE LLEGA
        }

PASO POR VALOR Y PASO POR REFERENCIA

    - Cuando mandas una variable primitiva a un método SE COPIA EL VALOR, no la referencia
    - Cuando mandas una variable de Instancia a un método SE MANDA LA REFERENCIA

ELEGIBLES POR EL GARBAGE COLLECTOR

    - Cuando ya nadie a punta a la referencia y antes habia 1 o varios objetos apuntando a ella, se pueden igualar a null


STRING

    - El método CONCAT genera una nueva cadena en una nueva referencia, no lo hace en la misma
    - charAt(indice)                    regresa: un cacarter
    - contains(cadena)                  regresa: booleano
    - starsWith(cadena)                 regresa: booleano
    - endsWith(cadena)                  regresa: booleando
    - indexOf(cadena)                   regresa: int (Si pasan una cadena, pasa el indice donde inicia)
    - lenght()                          regresa: int (numero de caracteres)
    - replace(cadena)                   regresa: nueva cadena
    - substring(indice)                 regresa: nueva cadena (desde en indice que se le dijo)
    - substring(indice, indicefinal)    regresa: nueva cadena (desde donde se dijo hasta UNO ANTES de donde se dijo)                                                                            IMPORTANTEEEEEEEEEE
    - toLowerCase()                     regresa: nueva cadena en minusculas
    - toUpperCase()                     regresa: nueva cadena en mayusculas
    - trim()                            regresa: nueva cadena sin espacios a los lados

    - SE PUEDE USAR = NEW String() !!!!!!!!!!!!!!!!!!!!!!! y pasarle en los corchetes el valor
    - Cuando se hace el NEW, se crea una cadena de texto fuera del POOL STRING

COMPARAR STRING

    - Se puede hacer con el ==  ESTE COMPARA LAS REFERENCIAS!!! no el contenido
    - Se puede hacer con equals ESTE COMPARA EL CONTENIDO, no la referencia
    - Cuando es: String a = "Hola" y String b = "Ho" + "la", los ve como iguales
    - Pero cuando es: String a = (c = "Ho") + (d = "la") y String b = "Hola", ahi los ve diferentes

    - Cuando una cadena de texto es creada SIN literales, entonces se genera una nueva referencia con el valor de las variables que la componen Y QUE NO vive en POOL STRING

LITERALES

    - " " son los valores que se declaran entre comillas dobles

POOL STRING

    - Vive en heap
    - SI YA HAY UN VALOR "Hola" por ejemplo y otra variable se le asigna el mismo valor NO CREA una nueva referencia, la asigna a la misma!!!! :O (IMAGEN 1)

STRINGBUILDER

    - Es una clase MUTABLE, lo que quiere decir que no es como String que debes regresar y recibir el valor para que cambie.
    - FORZOSAMENTE utiliza NEW para inicializar
    - APPEND es igual a CONTACT de String, pero no es necesario reciribir el valor que regresa (AGREGAR EL VALOR AL FINAL DE LA CADENA)
    - INSERT, concatena una cadena en el indice posterior al que se le pasa como parametro, ESTE INDICE DEBE EXISTIR si no manda error de EJECUCIÓN

CLASES WRAPPER

    - NO NECESITAN que se les haga un NEW al ser una clase especial
    - Hay una por cada dato primitivo
    - Se les llama "ENVOLTORIOS" porque nos permiten utilizar a los datos primitivos como objetos
    - TODO lo que aplica con un PRIMITIVO se puede aplicar con un graper, como Integer a = 1; a++;
    - VENTAJA de usar wrappers, que puedes usar métodos sobre las variables

BOXING

    - Cuando un valor primitivo es ENVUELTO en una clase wrapper
    - Se le llama AUTOBOXING porque Java lo hace automaticamente cuando se le asigna un valor primitivo

UNBOXING

    - Cuando un valor de una variable WRAPPER es seteado a un dato primitivo
    - AUTOUNBOXING cuando el valor se le pasa a un primitivo

FECHAS Y HORARIOS

    - En java 8 se mejora el uso de fechas, ya no mas DATE y CALENDAR
    - Ahora se usa:
        ~ LocalDate             Solo trabajas con Fecha
        ~ LocalDateTime         Fecha y tiempo
        ~ LocalTime             Solo tiempo
        ~ Period                Periodo de tiempo de 1 semana, 1 mes, cosas similares (Se le agrega al LocalDate o LocalDateTime para que genere una nueva fecha)
        ~ DateTimeFormatter     

        ENUMS: DayOfWeek
               Month

    - Son clases INMUTABLES, no se modifican, se les tiene que cachar el valor de retorno
    - NO se les genera una instancia con NEW, usan métodos estaticos, a esta manera de instanciar se le llama "patron de diseño FACTORY" ejemplo:
        LocalDate date = LocalDate.now();

    METODOS DE FABRICA (FACTORY)

        ~ NOW       Me regresa la fecha u hora actual
        ~ OF        Yo le digo la fecha que quiero
        ~ PLUS..    Agrega dias, meses, años, etc
        ~ MINUS..   Quita dias, meses, años, etc
    

============= RECORDAR =============

- Objeto == Instancia
- Cuando le damos "Ejecutar" es cuando se da EJECUTAR, hasta entonces no se guarda nada en memoria HEAP (se inicializa, se reserva, imprime)


============= COMANDOS =============

javac                               - Sirve para revisar si efectivamente tengo mi variable de entorno en el path
javac opciones archivo.java         - Sirve para compilar el archivo y generar el .class, se le puede dar una ruta de archivos (opciones) u otras opciones que se usan para compilar!!!
                                      FORZOSAMENTE debe tener la extensión .java!!! si no, no compila, MANDA UN ERROR:  "are only accepted if annotation processing is explicitly requested"
java opciones archivo               - Se utiliza para compilar código fuente. Igual que javac, puede recibir opciones diferentes para su ejecución
                                      LA DIFERENCIA es que no hay que ponerle el .class!!!! (que la shingada), si se lo pones MANDA UN ERROR!
                                      YA TIENE QUE ESTAR COMPILADO Y CREADO EL .class                                                                                                               IMPORTANTEEEEEEEEEE
java opciones archivo[argumentos]   - ASI se le pasan los argumentos!!!!!!!!! :O toda mi vida quise saberlo <3 (LO EJECUTE Y NO SALIO, hay que actualizar cuando lo veamos)



============= COMANDOS NETBEANS =============

sout                                - Es para System.out.println
wh                                  - While
ifelse                              - Genera toda la estructura de if
sw                                  - Switch
Ctrl + E                            - Eliminar una linea
TODOS los shortcuts estan en:       - Help > Keybord Shortcuts Card (En este menu das click y aparece un pdf con todos)
Click derecho + format              - Identa el codigo!! 


============= RESUMEN CLASES =============

ANTES DE INICIAR
1   "Acerca de Hittechs"                            Una redacción de que es y el nombre de  mi asesor "Cristina Casas" ccasas@hittechs.com.mx
2   "¿Cómo instalar JDK?"                           No funciona ;__; vamos iniciando mal, aun que ya lo tengo (errores/1.png)
3   "¿Cómo configurar la variable de entorno Path?" Un comando en la terminal de windows, no lo segui porque ya la tengo, uso siempre la interfaz
4   "¿Cómo instalar Netbeans 11?"                   Tampoco funciona ;___; lo haré por mi mismo porque no se si en el curo especifiquen cosas en el (errores/2.png)
                                                    Lo instale sin problemas, esta muy sencillo de instalar
5   "¿Como instalar DIA?"                           No lo instale porque es una herramienta para crear diagramas, creo que con StarUML estare bien
6   "Crear una cuenta de GitHub"                    Tampoco funciona ;___; lo bueno que ya tenía la cuenta, porque si no... me atraso (errores/3.png)

INTRODUCCIÓN A LA TECNOLOGÍA JAVA

1   "Principales características de la tecnología 
    Java"                                           Muy largo el video 38 minutos, interesante pero largo, historia y caracteristicas de Java
2   "Hello World Java"                              Creamos un archivo en el blog de notas y fue explicando que era cada cosa, por ejemplo: SENTENCIA, BLOQUE, PALABRA RESERVADA, MODIFICADOR DE ACCESO,
                                                    MÉTODO MAIN, SYSTEM.OUT
3   "Describir e implementar el método main"        Un video un chiquito como de 3 minutos, solo explica que es main y como se nombra/firma
4   "Ejecutar una aplicación Java desde línea
    de comandos utilizando java y javac"            FASES de un aplicación (las 3 que escribi al principio), JDK, 
                                                    JAVAC para compilar mi clase desde la consola (CON EXTENSIÓN DEL ARCHIVO), 
                                                    JAVA para correr el programa (SIN EXTENSION DEL ARCHIVO)

IMPLEMENTANDO CLASES EN JAVA

1   "Presentación de un problema para su análisis
    y modelado"                                     Un video corto sobre una necesidad que tiene hittechs de crear un sistema que controle cosas como:
                                                    EMPLEADOS, DEPARTAMENTOS, GERENTES y SALARIOS (eso fue lo que ubique hasta ahora)
2   "Introducción a UML (Diagramas de Clase)"       Conceptos de diagramas UML, TAXONOMIA, DIAGRAMA DE CLASES, Representación de modificadores de acceso en un diagrama
                                                    hicimos un ejercicio y cree un archivo donde guarde el diagrama de clases
3   "Introducción a Java Netbeans"                  El video muestra como esta estructurado Netbeans, tambien dieron el concepto de IDE"
4   "Introducción a Git y GitHub"                   Una explicación de Git (no habla de GitHub a pesar del titulo jaja), sobre arboles, branches y commit, interesante
5   "Clonar el proyecto HumanResources de GitHub"   Explica como clonar un proyecto desde Netbeans PERO... necesito permisos ;____; y aun no me los dan, 
                                                    intentare continuar con las clases siguientes para no atrasarme
                                                    No se pudo porque utilizan el proyecto en la siguiente parte.. a esperar :(
                                                    ACTUALIZACIÓN: Ya pude, el lunes mismo me dieron permisos y ya pude descargar 15/06/20
6   "Definición y estructura que compone una
    Clase Java"                                     CONCEPTO de Clase, Paquete, explicación de las carpetas del proyecto HumanResources
                                                    MODIFICADORES de acceso para clase!!, IMPORTANCIA de la clase publica y las de default
7   "Definir e implementar campos dentro de una     CONCEPTOS de Atributos, Identificadores (Las 4 reglas, 2 de sytaxis y 2 de buenas practicas), creamos las 3 clases
    clase"                                          definidas en nuestro diagrama de clases
8   "Empujar nuestros cambios a GitHub"             Explicación de como funciona GitHub para subir los cambios, como subir los cambios (git add, commit y push),
                                                    Explica como subir los cambios desde Netbeans (Custumizo la barra con Add, Commit Y Push)
                                                    Hicimos el primer commit de los nuevos archivos (se quita el verde de los archivos en NetBeans)
9   "Definir e implementar métodos dentro de una    CONCEPTO de Método, puede tener todos los modificadores e hizo solo un método y explico cada una de las partes
    Clase"                                          tambien dio un ejemplo que no se debe guardar en la clase
10  "Shortcut en NetBeans"                          Concepto de CONCATENACIÓN, se implementaron los métodos de "getDetail" agregandole un monton de Systems.out
11  "Más sobre el método main"                      Diferentes formas de escribir el método main, MUY interesante, revisarlas bien para exámen
12  "Creación de objetos en Java"                   Explicación de la creación de un objeto a partir de una clase, como se llena el objeto (sus atributos), estuvo sencillo
13  "Definir e implementar las sentencias
    package e import"                               Explicación de cual es orden de los package, import y class (pic), se puede tener varios imports, los imports no aplican
                                                    para las subcarpetas, solo para las clases que lo contienen, por default el package donde esta la clase esta importado,
                                                    tambien el package java.lang esta por default.


VARIABLES Y ALCANCE

1   "Identificar tipos de variables y su alcance"   CONCEPTOS de Variables, Variables de acuerdo a su alcance (de INSTACIA o LOCALES), Variables de acuerdo a su tipo de dato
                                                    (de REFERENCIA o PRIMITIVAS), empece a guardar en un archivo nuevo los errores que mencionan de compilación o ejecución
2   "Introducción a los tipos de datos primitivos"  Los 8 tipos de datos primitivos con sus valores en bits, muy corto el video
3   "Primitivos Enteros"                            Creamos un nuevo proyecto, lo llamamos algo de primitives, en una clase vamos poniendo los numeros ENTEROS primitivos y solo
                                                    vimos el rango en números de byte y de long (lo hizo con una calculadora)
4   "Literales"                                     Concepto de literales, literales en hexadecimal, octal y binario, separar numeros con _ 
5   "Primitivos de coma flotante"                   Ejemplos con double y float, muy sencillo, nada nuevo
6   "Primitivos de lógicos"                         Ejercicio con boolean, pero a parte hablo de que las literales pueden venir de una operación o de otra variable
7   "Primitivos textuales"                          Ejercicio con char, un char puede recibir un caracter, un codigo UNICODE, un número del código UNICODE o un caracter de escape!!
8   "Promoción y casting de variables"              Ejercicio con promoción y casting, hay un ejemplo raro donde un long cabe en un float sin marcar error
9   "Manejo de la administración de la memoria
    en Java, relación entre Heap y Stack"           Que es Stack, que es Heap y los valores por defecto para los tipos de dato, explicación paso a paso de como Java ejecuta el guardado
                                                    de las variables primitivas y de referencia, locales y de instancia en el heap y en el stack
10  "Uso del debug en Netbeans"                     Enseña a usar el debug en netbeans utilizando un poco los conceptos de la clase anterior



ARRAYS
1   "Introducción a los Arrays 
    y sus caracteristicas"                          Una introducción a que son los arreglos, pocos minutos, explica como se almacenan en heap, que son, se componen de ELEMENTOS
2   "Creación y declaración de un Array"            Nos puso un ejemplo donde se DECLARA y luego se INICIALIZA una variable primitiva, y despues un arreglo, luego enseño los
                                                    pasos que sigue la declaración e inicialización de un arreglo (son 3, primero se reserva el espacio, luego inicializan los elementos
                                                    y por último se relaciona)
3   "Accediendo a los elementos de un Array"        Ejemplo de como agregarle un valor en una posición o posiciones a un array, los errores que ocurren en tiempo de COMPILACIÓN y EJECUCIÓN,
                                                    Como se pierde la referencia a un arreglo cuando se inicializa de nuevo.
4   "Otras maneras de crear y utilizar arrays"      Los corchetes pueden ir antes del identificador o despues, declaraciones usando {}, la propiedad y el método LENGTH
5   "Array de referencias a objetos"                Ejemplo de arreglo de objetos, IMPORTANTE, guardo un objeto en el arreglo y luego lo igualo con null, PERO el arreglo sigue conservando la referencia
6   "Array de Arrays"                               Ejemplo de arreglos de arreglos, declaración, ARRAY DE ARRAY REGULARES o ARRAY DE ARRAY IRREGULARES
7   "Accediendo al array args del método main"      Ejemplo de como pasar parametros por consola y por netbeans

OPERADORES Y ESTRUCTURAS DE DECISIÓN
1   Operadores aritmeticos                          + - % / * ,Ejemplos con operadores aritmeticos, estan perros, cuando se usan parentesis, cuando usan precendencia, cuando se vuelven cadenas
2   Operadores de asginación                        += , -=, /= , Ejemplo (AsignTest.java), simplifican las operaciones de asignación en combinación con una aritmetica, NO NOS ENSEÑARON los de nivel de bytes
                                                    dijo que para más adelante en el curso (|= o el ^=)
3   Operadores unarios                              Solo ocupan un operando, por ejemplo +a, -a, ++a o a++ y ~a, hicimos un ejercicio (UnuaryTest.java) con ++a y a++, yo me puse a revisar que era el ~
4   Operadores relacionales                         >, <, <=, >=, ==, !=, MUY SENCILLOS, al ejercicio no le movi, solo enseña como funcionan (RelationalTest.java)
5   Operadores condicionales                        &&, &, ||, |, !, ^, ya vi para que sirve & nada más, pero no veo en que se pueda utilizar, 
                                                    APRENDI a utilizar ^ (sirve para cuando el resultado es true y false o false y true), ahi se deja pasar, porque cuando es false false o true true no pasa
6   Operadores bit a bit                            SUMAN Bit, esta muy chido, hay que repasar, el ejemplo se quedo en BitsTest
7   Operador Ternario                               Estaba sencillo, ya lo sabia, no vimos nada nuevo
8   Estructura if / else                            Usar if sin llaves!! (solo la primera linea esta dentro de la condicional), usar if (b = true)!!! asignando dentro del if, tambien se puede
9   Estructura switch                               Como usarlo, como puede ir deafult hasta arriba, como usa los break, como debe ser de los tipos int, short, byte, char, String y enum

CICLOS
1   Estructura y sintaxis del ciclo for             Un monton de cosas nuevas, en el for no es requerido poner todas sus secciones, se puede declarar varias variables, se pueden actualizar igual
                                                    variables, se puede utilizar una condicional que no tenga que ver con la variable declarada, los pasos como funciona, etc.
2   Estructura y sintaxis del ciclo While           Un ejercicio muy sencillo, no tiene muchas cosas relevantes
3   Estructura y sintaxis del ciclo do While        Un ejercicio muy sencillo de nuevo, no tiene cosas relevantes
4   Iterar sobre arrays                             Un ejercicio de como ir iterando un array, sencillo
5   Estructura y sintaxis de for each               Un ejercicio muy sencillo, nada nuevo
6   Break y Continue                                Continue hace que dentro del ciclo, lo que esta posterior no se ejecute!!!, break funciona como lo conocemos
7   Sentencias inalcanzables                        Sentencias que vienen despues del break, return, continue o un ciclo infinito

TRABAJANDO CON REFERENCIAS A OBJETOS
1   Uso e implementación de encapsulamiento         Cambiamos los modificadores de acceso de los atributos la clase Employee, empieza a explicar el encapsulamiento
2   Control de acceso y uso de private              Explicación de private y como no se puede acceder, tambien puso una tablita para los modificadores publicos y privados
3   Métodos Get y Set                               Cambiamos las clases que usamos al principio (Employee, Department, etc) cambiando los atributos a encapsulados, sencillo
4   Utilizar la palabra reservada this              Explicación larguisima de como se utiliza el this, lo explico en su pizarron no hicimos ejercicio, uso heap y stack para explicar
5   Trabajar con referencias a Objetos              Nos enseño como agregar objetos dentro de otros, estuvo aburrido
6   Resolver NullPointerException                   Nos enseña como settear los objetos porque como se llamaban en el getDetail mandaban nullpointer, tambien agrego una validación en getDetail
7   Diferenciar entre Paso por Valor y Paso por     Paso por valor cuando es una variable primitiva, Paso por referencia cuando es un objeto
    Referencia
8   Conocer cuando los objetos son elegibles por    Cuando pierde todas las referencias el objeto ya es elegible para el garbaje, una explicación sencilla de 7 minutos
    el Garbage Collector

TRABAJANDO CON API´s JAVA
1   Utilizar la clase String                        Los métodos más importantes de string, seguro vienen en el examen, hay que practicarlos
2   Probar la igualdad de String 
    mediante == y equals()                          Muy buena clase, como se comparan Strings con == o con equals, POOL STRING (nuevo conocimiento) y LITERALES (lo que va entre comilla doble)
3   Diferenciar entre Objeto y Literal String       Se puede usar New String() para declarar un String
4   Aprender a utilizar la documentación de la API  
    de Java                                         Enseño la interfaz del API de java, nada nuevo.
5   Utilizar la clase StringBuilder                 Es MUTABLE, lo que quiere decir que no necesita recibir el valor de retorno, cambia por dentro, nos enseño vario metodos como REVERSE que voltea la cadena
6   Utilizar las clases Wrapper (Byte, Short,       Clases Wrapper, se utilizan en base a los primitivos para obtener el beneficio de tratarlos como objetos y usar sus métodos, estuvo sencillo, se inicializan en null
    Integer, Long, Float, Double, Boolean, Charanter)
7   Conocer los conceptos de Boxing y Unboxing      Conceptos de BOXING y UNBOXING, boxin cuando le pasas un primitivo a un wrapper, y unboxing cuando le pasas un wrapper a un primitivo
    entre primitivos y Wrapper
8   Manejo de fechas y horarios                     Comenta acerca de las clases LocalDateTime, LocalDate, LocalTime, Period y DateTimeFormatter que vienen a mejorar la funcionalidad de DATE y CALENDAR 
                                                    (NO HICIMOS NINGUN EJERCICIO, duro poco el video)
9   LocalDate, LocalTime y LocalDateTime            Ejercicio de como utilizar las 3 clases prinicipales (No dijo nada de Period o DateTimeFormatter)
10  Trabajando con el método de fábrica of          Método OF, para pasarle una fecha con valores de nosotros, una fecha especifica, tambien se actualizo el ejercicio de Employee
11  Manipulación de fechas y horarios               Métodos PLUS...algo, MINUS...algo, para quitar y poner dias, meses, años, minutos, segundos, etc
12  Trabajando con Periodos                         Ejercicio rapido con periodo, esta muy bueno, para sumarle un periodo en especifico a la fecha y que te de una nueva fecha
13  Uso e implementación de la clase ArrayList
14  Encuesta intermedia